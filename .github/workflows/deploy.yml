name: Deploy to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
  push:
    branches:
      - main
      - develop

env:
  DOCKER_COMPOSE_FILE: docker-compose.yml
  DOCKER_COMPOSE_OVERRIDE: docker-compose.override.yml
  DOCKER_COMPOSE_PROD: docker-compose.prod.yml

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'staging' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure AWS Credentials
        if: github.event.inputs.environment == 'production'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        if: github.event.inputs.environment == 'production'
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Deploy to Server
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          DEPLOY_PATH: ${{ secrets.DEPLOY_PATH }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          # Create deployment directory if it doesn't exist
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST \
            "mkdir -p $DEPLOY_PATH/$ENVIRONMENT"
          
          # Copy necessary files
          scp -r docker-compose*.yml $SSH_USER@$SSH_HOST:$DEPLOY_PATH/$ENVIRONMENT/
          scp -r .env.$ENVIRONMENT $SSH_USER@$SSH_HOST:$DEPLOY_PATH/$ENVIRONMENT/.env
          
          # Deploy the application
          ssh -o StrictHostKeyChecking=no $SSH_USER@$SSH_HOST "
            cd $DEPLOY_PATH/$ENVIRONMENT && \
            export COMPOSE_FILE=$DOCKER_COMPOSE_FILE:$DOCKER_COMPOSE_OVERRIDE && \
            [[ '$ENVIRONMENT' == 'production' ]] && export COMPOSE_FILE=$COMPOSE_FILE:$DOCKER_COMPOSE_PROD || true && \
            echo 'Pulling latest images...' && \
            docker-compose pull && \
            echo 'Stopping existing containers...' && \
            docker-compose down --remove-orphans && \
            echo 'Starting new containers...' && \
            docker-compose up -d --build --remove-orphans && \
            echo 'Cleaning up...' && \
            docker system prune -f && \
            echo 'Deployment completed successfully!'
          "

      - name: Verify Deployment
        env:
          APP_URL: ${{ secrets.APP_URL }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
        run: |
          echo "Verifying deployment to $ENVIRONMENT environment..."
          curl -sSf $APP_URL/health
          echo "\n$ENVIRONMENT deployment verified successfully!"

      - name: Notify Success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: "#36a64f"
          SLACK_TITLE: "✅ Deployment Successful"
          SLACK_MESSAGE: "Successfully deployed to ${{ github.event.inputs.environment || 'staging' }} environment at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"

      - name: Notify Failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
          SLACK_COLOR: "#ff0000"
          SLACK_TITLE: "❌ Deployment Failed"
          SLACK_MESSAGE: "Failed to deploy to ${{ github.event.inputs.environment || 'staging' }} environment. Check the logs for details."
